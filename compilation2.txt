
yarn run v1.16.0
$ webpack --watch

webpack is watching the files…

Compilation {
  _pluginCompat:
   SyncBailHook {
     _args: [ 'options' ],
     taps: [ [Object], [Object], [Object] ],
     interceptors: [],
     call: [Function: lazyCompileHook],
     promise: [Function: lazyCompileHook],
     callAsync: [Function: lazyCompileHook],
     _x: undefined },
  hooks:
   { buildModule:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     rebuildModule:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     failedModule:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     succeedModule:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     addEntry:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     failedEntry:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     succeedEntry:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     dependencyReference:
      SyncWaterfallHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     finishModules:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [Array] },
     finishRebuildingModule:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     unseal:
      SyncHook {
        _args: [],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     seal:
      SyncHook {
        _args: [],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     beforeChunks:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterChunks:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     optimizeDependenciesBasic:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeDependencies:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeDependenciesAdvanced:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterOptimizeDependencies:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimize:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeModulesBasic:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeModules:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeModulesAdvanced:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterOptimizeModules:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeChunksBasic:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     optimizeChunks:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeChunksAdvanced:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     afterOptimizeChunks:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeTree:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [] },
     afterOptimizeTree:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeChunkModulesBasic:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeChunkModules:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeChunkModulesAdvanced:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterOptimizeChunkModules:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     shouldRecord:
      SyncBailHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     reviveModules:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     optimizeModuleOrder:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     advancedOptimizeModuleOrder:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     beforeModuleIds:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     moduleIds:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeModuleIds:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterOptimizeModuleIds:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     reviveChunks:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     optimizeChunkOrder:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     beforeChunkIds:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     optimizeChunkIds:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterOptimizeChunkIds:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     recordModules:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     recordChunks:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     beforeHash:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     contentHash:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterHash:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     recordHash:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     record:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     beforeModuleAssets:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     shouldGenerateChunkAssets:
      SyncBailHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     beforeChunkAssets:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     additionalChunkAssets:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     additionalAssets:
      AsyncSeriesHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [] },
     optimizeChunkAssets:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [] },
     afterOptimizeChunkAssets:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     optimizeAssets:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [] },
     afterOptimizeAssets:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     needAdditionalSeal:
      SyncBailHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterSeal:
      AsyncSeriesHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [] },
     chunkHash:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     moduleAsset:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     chunkAsset:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     assetPath:
      SyncWaterfallHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     needAdditionalPass:
      SyncBailHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     childCompiler:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     normalModuleLoader:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     optimizeExtractedChunksBasic:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     optimizeExtractedChunks:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     optimizeExtractedChunksAdvanced:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterOptimizeExtractedChunks:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined } },
  name: undefined,
  compiler:
   Compiler {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks:
      { shouldEmit: [SyncBailHook],
        done: [AsyncSeriesHook],
        additionalPass: [AsyncSeriesHook],
        beforeRun: [AsyncSeriesHook],
        run: [AsyncSeriesHook],
        emit: [AsyncSeriesHook],
        afterEmit: [AsyncSeriesHook],
        thisCompilation: [SyncHook],
        compilation: [SyncHook],
        normalModuleFactory: [SyncHook],
        contextModuleFactory: [SyncHook],
        beforeCompile: [AsyncSeriesHook],
        compile: [SyncHook],
        make: [AsyncParallelHook],
        afterCompile: [AsyncSeriesHook],
        watchRun: [AsyncSeriesHook],
        failed: [SyncHook],
        invalid: [SyncHook],
        watchClose: [SyncHook],
        environment: [SyncHook],
        afterEnvironment: [SyncHook],
        afterPlugins: [SyncHook],
        afterResolvers: [SyncHook],
        entryOption: [SyncBailHook] },
     name: undefined,
     parentCompilation: undefined,
     outputPath: '/var/www/html/mern-ts/backend/build',
     outputFileSystem:
      NodeOutputFileSystem {
        mkdirp: [Function],
        mkdir: [Function: bound mkdir],
        rmdir: [Function: bound rmdir],
        unlink: [Function: bound unlink],
        writeFile: [Function: bound writeFile],
        join: [Function: bound join] },
     inputFileSystem:
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage: [Storage],
        _readdirStorage: [Storage],
        _readFileStorage: [Storage],
        _readJsonStorage: [Storage],
        _readlinkStorage: [Storage],
        _stat: [Function: bound bound ],
        _statSync: [Function: bound bound ],
        _readdir: [Function: bound readdir],
        _readdirSync: [Function: bound readdirSync],
        _readFile: [Function: bound bound readFile],
        _readFileSync: [Function: bound bound readFileSync],
        _readJson: [Function],
        _readJsonSync: [Function],
        _readlink: [Function: bound bound readlink],
        _readlinkSync: [Function: bound bound readlinkSync] },
     recordsInputPath: undefined,
     recordsOutputPath: undefined,
     records: { modules: [Object], chunks: [Object] },
     removedFiles: Set {},
     fileTimestamps: Map {},
     contextTimestamps: Map {},
     resolverFactory:
      ResolverFactory {
        _pluginCompat: [SyncBailHook],
        hooks: [Object],
        cache1: [WeakMap],
        cache2: [Map] },
     resolvers: { normal: [Object], loader: [Object], context: [Object] },
     options:
      { mode: 'development',
        entry: './server/server.ts',
        output: [Object],
        resolve: [Object],
        module: [Object],
        target: 'node',
        node: [Object],
        externals: [Object],
        plugins: [Array],
        context: '/var/www/html/mern-ts/backend',
        watch: true,
        devtool: 'eval',
        cache: true,
        performance: false,
        optimization: [Object],
        resolveLoader: [Object] },
     context: '/var/www/html/mern-ts/backend',
     requestShortener:
      RequestShortener {
        currentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts\/backend/g,
        parentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts/g,
        buildinsAsModule: false,
        buildinsRegExp: /(^|!)\/usr\/lib\/node_modules\/webpack/g,
        cache: Map {} },
     running: true,
     watchMode: true,
     _assetEmittingSourceCache: WeakMap { <items unknown> },
     _assetEmittingWrittenFiles: Map {},
     watchFileSystem:
      NodeWatchFileSystem {
        inputFileSystem: [CachedInputFileSystem],
        watcherOptions: [Object],
        watcher: [EventEmitter] },
     dependencies: undefined,
     _lastCompilationFileDependencies:
      SortableSet [Set] {
        _sortFn: undefined,
        _lastActiveSortFn: null,
        _cache: undefined,
        _cacheOrderIndependent: undefined },
     _lastCompilationContextDependencies:
      SortableSet [Set] {
        _sortFn: undefined,
        _lastActiveSortFn: null,
        _cache: undefined,
        _cacheOrderIndependent: undefined } },
  resolverFactory:
   ResolverFactory {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks: { resolveOptions: [HookMap], resolver: [HookMap] },
     cache1: WeakMap { <items unknown> },
     cache2: Map { 'loader|{}' => [Resolver], 'normal|{}' => [Resolver] } },
  inputFileSystem:
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: [Map],
        levels: [Array],
        count: 6,
        interval:
         Timeout {
           _idleTimeout: 530,
           _idlePrev: [TimersList],
           _idleNext: [Timeout],
           _idleStart: 1895,
           _onTimeout: [Function: bound tick],
           _timerArgs: undefined,
           _repeat: 530,
           _destroyed: false,
           [Symbol(refed)]: true,
           [Symbol(asyncId)]: 40,
           [Symbol(triggerId)]: 39 },
        needTickCheck: false,
        nextTick: null,
        passive: false,
        tick: [Function: bound tick] },
     _readdirStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readFileStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: [Map],
        levels: [Array],
        count: 3,
        interval:
         Timeout {
           _idleTimeout: 530,
           _idlePrev: [Timeout],
           _idleNext: [TimersList],
           _idleStart: 1875,
           _onTimeout: [Function: bound tick],
           _timerArgs: undefined,
           _repeat: 530,
           _destroyed: false,
           [Symbol(refed)]: true,
           [Symbol(asyncId)]: 25,
           [Symbol(triggerId)]: 24 },
        needTickCheck: false,
        nextTick: null,
        passive: false,
        tick: [Function: bound tick] },
     _readJsonStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: [Map],
        levels: [Array],
        count: 3,
        interval:
         Timeout {
           _idleTimeout: 530,
           _idlePrev: [Timeout],
           _idleNext: [Timeout],
           _idleStart: 1877,
           _onTimeout: [Function: bound tick],
           _timerArgs: undefined,
           _repeat: 530,
           _destroyed: false,
           [Symbol(refed)]: true,
           [Symbol(asyncId)]: 26,
           [Symbol(triggerId)]: 24 },
        needTickCheck: false,
        nextTick: null,
        passive: false,
        tick: [Function: bound tick] },
     _readlinkStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: [Map],
        levels: [Array],
        count: 13,
        interval:
         Timeout {
           _idleTimeout: 530,
           _idlePrev: [Timeout],
           _idleNext: [Timeout],
           _idleStart: 1891,
           _onTimeout: [Function: bound tick],
           _timerArgs: undefined,
           _repeat: 530,
           _destroyed: false,
           [Symbol(refed)]: true,
           [Symbol(asyncId)]: 38,
           [Symbol(triggerId)]: 30 },
        needTickCheck: false,
        nextTick: null,
        passive: false,
        tick: [Function: bound tick] },
     _stat: [Function: bound bound ],
     _statSync: [Function: bound bound ],
     _readdir: [Function: bound readdir],
     _readdirSync: [Function: bound readdirSync],
     _readFile: [Function: bound bound readFile],
     _readFileSync: [Function: bound bound readFileSync],
     _readJson: [Function],
     _readJsonSync: [Function],
     _readlink: [Function: bound bound readlink],
     _readlinkSync: [Function: bound bound readlinkSync] },
  requestShortener:
   RequestShortener {
     currentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts\/backend/g,
     parentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts/g,
     buildinsAsModule: false,
     buildinsRegExp: /(^|!)\/usr\/lib\/node_modules\/webpack/g,
     cache: Map {} },
  options:
   { mode: 'development',
     entry: './server/server.ts',
     output:
      { path: '/var/www/html/mern-ts/backend/build',
        filename: 'bundle.js',
        chunkFilename: '[id].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     resolve:
      { extensions: [Array],
        unsafeCache: true,
        modules: [Array],
        mainFiles: [Array],
        aliasFields: [],
        mainFields: [Array],
        cacheWithContext: false },
     module:
      { rules: [Array],
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: /.*/,
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: true,
        defaultRules: [Array] },
     target: 'node',
     node:
      { __dirname: false,
        __filename: false,
        console: false,
        process: true,
        global: true,
        Buffer: true,
        setImmediate: true },
     externals:
      { abbrev: 'commonjs abbrev',
        'ansi-align': 'commonjs ansi-align',
        'ansi-regex': 'commonjs ansi-regex',
        'ansi-styles': 'commonjs ansi-styles',
        anymatch: 'commonjs anymatch',
        'arr-diff': 'commonjs arr-diff',
        'arr-flatten': 'commonjs arr-flatten',
        'arr-union': 'commonjs arr-union',
        'array-unique': 'commonjs array-unique',
        'assign-symbols': 'commonjs assign-symbols',
        'async-each': 'commonjs async-each',
        atob: 'commonjs atob',
        'balanced-match': 'commonjs balanced-match',
        base: 'commonjs base',
        'binary-extensions': 'commonjs binary-extensions',
        boxen: 'commonjs boxen',
        'brace-expansion': 'commonjs brace-expansion',
        braces: 'commonjs braces',
        'cache-base': 'commonjs cache-base',
        camelcase: 'commonjs camelcase',
        'capture-stack-trace': 'commonjs capture-stack-trace',
        chalk: 'commonjs chalk',
        chokidar: 'commonjs chokidar',
        'ci-info': 'commonjs ci-info',
        'class-utils': 'commonjs class-utils',
        'cli-boxes': 'commonjs cli-boxes',
        'collection-visit': 'commonjs collection-visit',
        'color-convert': 'commonjs color-convert',
        'color-name': 'commonjs color-name',
        'component-emitter': 'commonjs component-emitter',
        'concat-map': 'commonjs concat-map',
        configstore: 'commonjs configstore',
        'copy-descriptor': 'commonjs copy-descriptor',
        'core-util-is': 'commonjs core-util-is',
        'create-error-class': 'commonjs create-error-class',
        'cross-spawn': 'commonjs cross-spawn',
        'crypto-random-string': 'commonjs crypto-random-string',
        debug: 'commonjs debug',
        'decode-uri-component': 'commonjs decode-uri-component',
        'deep-extend': 'commonjs deep-extend',
        'define-property': 'commonjs define-property',
        'dot-prop': 'commonjs dot-prop',
        duplexer3: 'commonjs duplexer3',
        'escape-string-regexp': 'commonjs escape-string-regexp',
        execa: 'commonjs execa',
        'expand-brackets': 'commonjs expand-brackets',
        'extend-shallow': 'commonjs extend-shallow',
        extglob: 'commonjs extglob',
        'fill-range': 'commonjs fill-range',
        'for-in': 'commonjs for-in',
        'fragment-cache': 'commonjs fragment-cache',
        'get-stream': 'commonjs get-stream',
        'get-value': 'commonjs get-value',
        'glob-parent': 'commonjs glob-parent',
        'global-dirs': 'commonjs global-dirs',
        got: 'commonjs got',
        'graceful-fs': 'commonjs graceful-fs',
        'has-flag': 'commonjs has-flag',
        'has-value': 'commonjs has-value',
        'has-values': 'commonjs has-values',
        'ignore-by-default': 'commonjs ignore-by-default',
        'import-lazy': 'commonjs import-lazy',
        imurmurhash: 'commonjs imurmurhash',
        inherits: 'commonjs inherits',
        ini: 'commonjs ini',
        'is-accessor-descriptor': 'commonjs is-accessor-descriptor',
        'is-binary-path': 'commonjs is-binary-path',
        'is-buffer': 'commonjs is-buffer',
        'is-ci': 'commonjs is-ci',
        'is-data-descriptor': 'commonjs is-data-descriptor',
        'is-descriptor': 'commonjs is-descriptor',
        'is-extendable': 'commonjs is-extendable',
        'is-extglob': 'commonjs is-extglob',
        'is-fullwidth-code-point': 'commonjs is-fullwidth-code-point',
        'is-glob': 'commonjs is-glob',
        'is-installed-globally': 'commonjs is-installed-globally',
        'is-npm': 'commonjs is-npm',
        'is-number': 'commonjs is-number',
        'is-obj': 'commonjs is-obj',
        'is-path-inside': 'commonjs is-path-inside',
        'is-plain-object': 'commonjs is-plain-object',
        'is-redirect': 'commonjs is-redirect',
        'is-retry-allowed': 'commonjs is-retry-allowed',
        'is-stream': 'commonjs is-stream',
        'is-windows': 'commonjs is-windows',
        isarray: 'commonjs isarray',
        isexe: 'commonjs isexe',
        isobject: 'commonjs isobject',
        'kind-of': 'commonjs kind-of',
        'latest-version': 'commonjs latest-version',
        'lowercase-keys': 'commonjs lowercase-keys',
        'lru-cache': 'commonjs lru-cache',
        'make-dir': 'commonjs make-dir',
        'map-cache': 'commonjs map-cache',
        'map-visit': 'commonjs map-visit',
        micromatch: 'commonjs micromatch',
        minimatch: 'commonjs minimatch',
        minimist: 'commonjs minimist',
        'mixin-deep': 'commonjs mixin-deep',
        ms: 'commonjs ms',
        nanomatch: 'commonjs nanomatch',
        nodemon: 'commonjs nodemon',
        'nodemon-webpack-plugin': 'commonjs nodemon-webpack-plugin',
        nopt: 'commonjs nopt',
        'normalize-path': 'commonjs normalize-path',
        'npm-run-path': 'commonjs npm-run-path',
        'object-copy': 'commonjs object-copy',
        'object-visit': 'commonjs object-visit',
        'object.pick': 'commonjs object.pick',
        'p-finally': 'commonjs p-finally',
        'package-json': 'commonjs package-json',
        pascalcase: 'commonjs pascalcase',
        'path-dirname': 'commonjs path-dirname',
        'path-is-absolute': 'commonjs path-is-absolute',
        'path-is-inside': 'commonjs path-is-inside',
        'path-key': 'commonjs path-key',
        pify: 'commonjs pify',
        'posix-character-classes': 'commonjs posix-character-classes',
        'prepend-http': 'commonjs prepend-http',
        'process-nextick-args': 'commonjs process-nextick-args',
        pseudomap: 'commonjs pseudomap',
        'pstree.remy': 'commonjs pstree.remy',
        ramda: 'commonjs ramda',
        rc: 'commonjs rc',
        'readable-stream': 'commonjs readable-stream',
        readdirp: 'commonjs readdirp',
        'regex-not': 'commonjs regex-not',
        'registry-auth-token': 'commonjs registry-auth-token',
        'registry-url': 'commonjs registry-url',
        'remove-trailing-separator': 'commonjs remove-trailing-separator',
        'repeat-element': 'commonjs repeat-element',
        'repeat-string': 'commonjs repeat-string',
        'resolve-url': 'commonjs resolve-url',
        ret: 'commonjs ret',
        'safe-buffer': 'commonjs safe-buffer',
        'safe-regex': 'commonjs safe-regex',
        semver: 'commonjs semver',
        'semver-diff': 'commonjs semver-diff',
        'set-value': 'commonjs set-value',
        'shebang-command': 'commonjs shebang-command',
        'shebang-regex': 'commonjs shebang-regex',
        'signal-exit': 'commonjs signal-exit',
        snapdragon: 'commonjs snapdragon',
        'snapdragon-node': 'commonjs snapdragon-node',
        'snapdragon-util': 'commonjs snapdragon-util',
        'source-map': 'commonjs source-map',
        'source-map-resolve': 'commonjs source-map-resolve',
        'source-map-url': 'commonjs source-map-url',
        'split-string': 'commonjs split-string',
        'static-extend': 'commonjs static-extend',
        'string-width': 'commonjs string-width',
        string_decoder: 'commonjs string_decoder',
        'strip-ansi': 'commonjs strip-ansi',
        'strip-eof': 'commonjs strip-eof',
        'strip-json-comments': 'commonjs strip-json-comments',
        'supports-color': 'commonjs supports-color',
        'term-size': 'commonjs term-size',
        'timed-out': 'commonjs timed-out',
        'to-object-path': 'commonjs to-object-path',
        'to-regex': 'commonjs to-regex',
        'to-regex-range': 'commonjs to-regex-range',
        touch: 'commonjs touch',
        undefsafe: 'commonjs undefsafe',
        'union-value': 'commonjs union-value',
        'unique-string': 'commonjs unique-string',
        'unset-value': 'commonjs unset-value',
        'unzip-response': 'commonjs unzip-response',
        upath: 'commonjs upath',
        'update-notifier': 'commonjs update-notifier',
        urix: 'commonjs urix',
        'url-parse-lax': 'commonjs url-parse-lax',
        use: 'commonjs use',
        'util-deprecate': 'commonjs util-deprecate',
        which: 'commonjs which',
        'widest-line': 'commonjs widest-line',
        'write-file-atomic': 'commonjs write-file-atomic',
        'xdg-basedir': 'commonjs xdg-basedir',
        yallist: 'commonjs yallist' },
     plugins: [ [_class] ],
     context: '/var/www/html/mern-ts/backend',
     watch: true,
     devtool: 'eval',
     cache: true,
     performance: false,
     optimization:
      { removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: false,
        occurrenceOrder: false,
        sideEffects: false,
        providedExports: true,
        usedExports: false,
        concatenateModules: false,
        splitChunks: [Object],
        runtimeChunk: undefined,
        noEmitOnErrors: false,
        checkWasmTypes: false,
        mangleWasmImports: false,
        namedModules: true,
        hashedModuleIds: false,
        namedChunks: true,
        portableRecords: false,
        minimize: false,
        minimizer: [Array],
        nodeEnv: 'development' },
     resolveLoader:
      { unsafeCache: true,
        mainFields: [Array],
        extensions: [Array],
        mainFiles: [Array],
        cacheWithContext: false } },
  outputOptions:
   { path: '/var/www/html/mern-ts/backend/build',
     filename: 'bundle.js',
     chunkFilename: '[id].bundle.js',
     webassemblyModuleFilename: '[modulehash].module.wasm',
     library: '',
     hotUpdateFunction: 'webpackHotUpdate',
     jsonpFunction: 'webpackJsonp',
     chunkCallbackName: 'webpackChunk',
     globalObject: 'global',
     devtoolNamespace: '',
     libraryTarget: 'var',
     pathinfo: true,
     sourceMapFilename: '[file].map[query]',
     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
     hotUpdateMainFilename: '[hash].hot-update.json',
     crossOriginLoading: false,
     jsonpScriptType: false,
     chunkLoadTimeout: 120000,
     hashFunction: 'md4',
     hashDigest: 'hex',
     hashDigestLength: 20,
     devtoolLineToLine: false,
     strictModuleExceptionHandling: false },
  bail: undefined,
  profile: undefined,
  performance: false,
  mainTemplate:
   MainTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     outputOptions:
      { path: '/var/www/html/mern-ts/backend/build',
        filename: 'bundle.js',
        chunkFilename: '[id].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { renderManifest: [SyncWaterfallHook],
        modules: [SyncWaterfallHook],
        moduleObj: [SyncWaterfallHook],
        requireEnsure: [SyncWaterfallHook],
        bootstrap: [SyncWaterfallHook],
        localVars: [SyncWaterfallHook],
        require: [SyncWaterfallHook],
        requireExtensions: [SyncWaterfallHook],
        beforeStartup: [SyncWaterfallHook],
        startup: [SyncWaterfallHook],
        render: [SyncWaterfallHook],
        renderWithEntry: [SyncWaterfallHook],
        moduleRequire: [SyncWaterfallHook],
        addModule: [SyncWaterfallHook],
        currentHash: [SyncWaterfallHook],
        assetPath: [SyncWaterfallHook],
        hash: [SyncHook],
        hashForChunk: [SyncHook],
        globalHashPaths: [SyncWaterfallHook],
        globalHash: [SyncBailHook],
        hotBootstrap: [SyncWaterfallHook] },
     requireFn: '__webpack_require__' },
  chunkTemplate:
   ChunkTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     outputOptions:
      { path: '/var/www/html/mern-ts/backend/build',
        filename: 'bundle.js',
        chunkFilename: '[id].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { renderManifest: [SyncWaterfallHook],
        modules: [SyncWaterfallHook],
        render: [SyncWaterfallHook],
        renderWithEntry: [SyncWaterfallHook],
        hash: [SyncHook],
        hashForChunk: [SyncHook] } },
  hotUpdateChunkTemplate:
   HotUpdateChunkTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     outputOptions:
      { path: '/var/www/html/mern-ts/backend/build',
        filename: 'bundle.js',
        chunkFilename: '[id].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { modules: [SyncWaterfallHook],
        render: [SyncWaterfallHook],
        hash: [SyncHook] } },
  runtimeTemplate:
   RuntimeTemplate {
     outputOptions:
      { path: '/var/www/html/mern-ts/backend/build',
        filename: 'bundle.js',
        chunkFilename: '[id].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     requestShortener:
      RequestShortener {
        currentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts\/backend/g,
        parentDirectoryRegExp: /(^|!)\/var\/www\/html\/mern\-ts/g,
        buildinsAsModule: false,
        buildinsRegExp: /(^|!)\/usr\/lib\/node_modules\/webpack/g,
        cache: Map {} } },
  moduleTemplates:
   { javascript:
      ModuleTemplate {
        _pluginCompat: [SyncBailHook],
        runtimeTemplate: [RuntimeTemplate],
        type: 'javascript',
        hooks: [Object] },
     webassembly:
      ModuleTemplate {
        _pluginCompat: [SyncBailHook],
        runtimeTemplate: [RuntimeTemplate],
        type: 'webassembly',
        hooks: [Object] } },
  semaphore:
   Semaphore {
     available: 100,
     waiters: [],
     _continue: [Function: bound _continue] },
  entries: [],
  _preparedEntrypoints: [],
  entrypoints: Map {},
  chunks: [],
  chunkGroups: [],
  namedChunkGroups: Map {},
  namedChunks: Map {},
  modules: [],
  _modules: Map {},
  cache: {},
  records:
   { modules: { byIdentifier: {}, usedIds: {} },
     chunks: { byName: {}, bySource: {}, usedIds: [] } },
  additionalChunkAssets: [],
  assets: {},
  errors:
   [ EntryModuleNotFoundError: Entry module not found: Error: Can't resolve './server/server.ts' in '/var/www/html/mern-ts/backend'
    at moduleFactory.create (/usr/lib/node_modules/webpack/lib/Compilation.js:980:31)
    at factory (/usr/lib/node_modules/webpack/lib/NormalModuleFactory.js:397:22)
    at resolver (/usr/lib/node_modules/webpack/lib/NormalModuleFactory.js:130:21)
    at asyncLib.parallel (/usr/lib/node_modules/webpack/lib/NormalModuleFactory.js:224:22)
    at /usr/lib/node_modules/webpack/node_modules/neo-async/async.js:2830:7
    at /usr/lib/node_modules/webpack/node_modules/neo-async/async.js:6877:13
    at normalResolver.resolve (/usr/lib/node_modules/webpack/lib/NormalModuleFactory.js:214:25)
    at doResolve (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:184:12)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn0 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)
    at resolver.doResolve (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js:37:5)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn0 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn0 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:27:1)
    at resolver.doResolve (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:42:38)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn4 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:16:1)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn0 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:27:1)
    at resolver.doResolve (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:42:38)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn1 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:16:1)
    at hook.callAsync (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/Resolver.js:238:5)
    at _fn0 (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)
    at fs.stat (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js:22:13)
    at process.nextTick (/usr/lib/node_modules/webpack/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:73:15)
    at processTicksAndRejections (internal/process/next_tick.js:74:9)
resolve './server/server.ts' in '/var/www/html/mern-ts/backend'
  using description file: /var/www/html/mern-ts/backend/package.json (relative path: .)
    using description file: /var/www/html/mern-ts/backend/package.json (relative path: ./server/server.ts)
      no extension
        /var/www/html/mern-ts/backend/server/server.ts doesn't exist
      .webpack.js
        /var/www/html/mern-ts/backend/server/server.ts.webpack.js doesn't exist
      .web.js
        /var/www/html/mern-ts/backend/server/server.ts.web.js doesn't exist
      .ts
        /var/www/html/mern-ts/backend/server/server.ts.ts doesn't exist
      .tsx
        /var/www/html/mern-ts/backend/server/server.ts.tsx doesn't exist
      .js
        /var/www/html/mern-ts/backend/server/server.ts.js doesn't exist
      as directory
        /var/www/html/mern-ts/backend/server/server.ts doesn't exist ],
  warnings: [],
  children: [],
  dependencyFactories:
   Map {
     [Function: WebAssemblyImportDependency] => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     [Function: WebAssemblyExportImportedDependency] => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     [Function: SingleEntryDependency] => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ConstDependency] Template: [Function: ConstDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyCompatibilityDependency] Template: [Function: HarmonyExportDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyInitDependency] Template: [Function: HarmonyInitDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyImportSideEffectDependency]
       Template: [Function: HarmonyImportSideEffectDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyImportSpecifierDependency]
       Template: [Function: HarmonyImportSpecifierDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyExportHeaderDependency] Template: [Function: HarmonyExportDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyExportExpressionDependency] Template: [Function: HarmonyExportDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyExportSpecifierDependency]
       Template: [Function: HarmonyExportSpecifierDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyExportImportedSpecifierDependency]
       Template: [Function: HarmonyExportImportedSpecifierDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyAcceptDependency] Template: [Function: HarmonyAcceptDependencyTemplate] } => NullFactory {},
     { [Function: HarmonyAcceptImportDependency] Template: [Function: HarmonyAcceptImportDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: AMDRequireDependency] Template: [Function: AMDRequireDependencyTemplate] } => NullFactory {},
     { [Function: AMDRequireItemDependency] Template: [Function: ModuleDependencyTemplateAsRequireId] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: AMDRequireArrayDependency] Template: [Function: AMDRequireArrayDependencyTemplate] } => NullFactory {},
     { [Function: AMDRequireContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory] },
     { [Function: AMDDefineDependency] Template: [Function: AMDDefineDependencyTemplate] } => NullFactory {},
     { [Function: UnsupportedDependency] Template: [Function: UnsupportedDependencyTemplate] } => NullFactory {},
     { [Function: LocalModuleDependency] Template: [Function: LocalModuleDependencyTemplate] } => NullFactory {},
     { [Function: CommonJsRequireDependency] Template: [Function: ModuleDependencyTemplateAsId] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: CommonJsRequireContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory] },
     { [Function: RequireResolveDependency] Template: [Function: ModuleDependencyTemplateAsId] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireResolveContextDependency] Template: [Function: ContextDependencyTemplateAsId] } => ContextModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory] },
     { [Function: RequireResolveHeaderDependency]
       Template: [Function: RequireResolveHeaderDependencyTemplate] } => NullFactory {},
     { [Function: RequireHeaderDependency] Template: [Function: RequireHeaderDependencyTemplate] } => NullFactory {},
     [Function: LoaderDependency] => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireIncludeDependency] Template: [Function: RequireIncludeDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireEnsureItemDependency] Template: [Function: NullDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireEnsureDependency] Template: [Function: RequireEnsureDependencyTemplate] } => NullFactory {},
     { [Function: RequireContextDependency] Template: [Function: ModuleDependencyTemplateAsRequireId] } => ContextModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory] },
     [Function: ContextElementDependency] => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportDependency] Template: [Function: ImportDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportEagerDependency] Template: [Function: ImportEagerDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportWeakDependency] Template: [Function: ImportDependencyTemplate] } => NormalModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory],
       ruleSet: [RuleSet],
       cachePredicate: [Function: bound Boolean],
       context: '/var/www/html/mern-ts/backend',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextModuleFactory {
       _pluginCompat: [SyncBailHook],
       hooks: [Object],
       resolverFactory: [ResolverFactory] } },
  dependencyTemplates:
   Map {
     'hash' => '',
     { [Function: ConstDependency] Template: [Function: ConstDependencyTemplate] } => ConstDependencyTemplate {},
     { [Function: HarmonyCompatibilityDependency] Template: [Function: HarmonyExportDependencyTemplate] } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyInitDependency] Template: [Function: HarmonyInitDependencyTemplate] } => HarmonyInitDependencyTemplate {},
     { [Function: HarmonyImportSideEffectDependency]
       Template: [Function: HarmonyImportSideEffectDependencyTemplate] } => HarmonyImportSideEffectDependencyTemplate {},
     { [Function: HarmonyImportSpecifierDependency]
       Template: [Function: HarmonyImportSpecifierDependencyTemplate] } => HarmonyImportSpecifierDependencyTemplate {},
     { [Function: HarmonyExportHeaderDependency] Template: [Function: HarmonyExportDependencyTemplate] } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyExportExpressionDependency] Template: [Function: HarmonyExportDependencyTemplate] } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyExportSpecifierDependency]
       Template: [Function: HarmonyExportSpecifierDependencyTemplate] } => HarmonyExportSpecifierDependencyTemplate {},
     { [Function: HarmonyExportImportedSpecifierDependency]
       Template: [Function: HarmonyExportImportedSpecifierDependencyTemplate] } => HarmonyExportImportedSpecifierDependencyTemplate {},
     { [Function: HarmonyAcceptDependency] Template: [Function: HarmonyAcceptDependencyTemplate] } => HarmonyAcceptDependencyTemplate {},
     { [Function: HarmonyAcceptImportDependency] Template: [Function: HarmonyAcceptImportDependencyTemplate] } => HarmonyAcceptImportDependencyTemplate {},
     { [Function: AMDRequireDependency] Template: [Function: AMDRequireDependencyTemplate] } => AMDRequireDependencyTemplate {},
     { [Function: AMDRequireItemDependency] Template: [Function: ModuleDependencyTemplateAsRequireId] } => ModuleDependencyTemplateAsRequireId {},
     { [Function: AMDRequireArrayDependency] Template: [Function: AMDRequireArrayDependencyTemplate] } => AMDRequireArrayDependencyTemplate {},
     { [Function: AMDRequireContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextDependencyTemplateAsRequireCall {},
     { [Function: AMDDefineDependency] Template: [Function: AMDDefineDependencyTemplate] } => AMDDefineDependencyTemplate {},
     { [Function: UnsupportedDependency] Template: [Function: UnsupportedDependencyTemplate] } => UnsupportedDependencyTemplate {},
     { [Function: LocalModuleDependency] Template: [Function: LocalModuleDependencyTemplate] } => LocalModuleDependencyTemplate {},
     { [Function: CommonJsRequireDependency] Template: [Function: ModuleDependencyTemplateAsId] } => ModuleDependencyTemplateAsId {},
     { [Function: CommonJsRequireContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextDependencyTemplateAsRequireCall {},
     { [Function: RequireResolveDependency] Template: [Function: ModuleDependencyTemplateAsId] } => ModuleDependencyTemplateAsId {},
     { [Function: RequireResolveContextDependency] Template: [Function: ContextDependencyTemplateAsId] } => ContextDependencyTemplateAsId {},
     { [Function: RequireResolveHeaderDependency]
       Template: [Function: RequireResolveHeaderDependencyTemplate] } => RequireResolveHeaderDependencyTemplate {},
     { [Function: RequireHeaderDependency] Template: [Function: RequireHeaderDependencyTemplate] } => RequireHeaderDependencyTemplate {},
     { [Function: RequireIncludeDependency] Template: [Function: RequireIncludeDependencyTemplate] } => RequireIncludeDependencyTemplate {},
     { [Function: RequireEnsureItemDependency] Template: [Function: NullDependencyTemplate] } => NullDependencyTemplate {},
     { [Function: RequireEnsureDependency] Template: [Function: RequireEnsureDependencyTemplate] } => RequireEnsureDependencyTemplate {},
     { [Function: RequireContextDependency] Template: [Function: ModuleDependencyTemplateAsRequireId] } => ModuleDependencyTemplateAsRequireId {},
     { [Function: ImportDependency] Template: [Function: ImportDependencyTemplate] } => ImportDependencyTemplate {},
     { [Function: ImportEagerDependency] Template: [Function: ImportEagerDependencyTemplate] } => ImportEagerDependencyTemplate {},
     { [Function: ImportWeakDependency] Template: [Function: ImportDependencyTemplate] } => ImportDependencyTemplate {},
     { [Function: ImportContextDependency]
       Template: [Function: ContextDependencyTemplateAsRequireCall] } => ContextDependencyTemplateAsRequireCall {} },
  childrenCounters: {},
  usedChunkIds: null,
  usedModuleIds: null,
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  compilationDependencies: Set {},
  _buildingModules: Map {},
  _rebuildingModules: Map {},
  emittedAssets: Set {},
  fullHash: '37d2bee01593e1fee854b81bde05d37c',
  hash: '37d2bee01593e1fee854',
  fileDependencies:
   SortableSet [Set] {
     _sortFn: undefined,
     _lastActiveSortFn: null,
     _cache: undefined,
     _cacheOrderIndependent: undefined },
  contextDependencies:
   SortableSet [Set] {
     _sortFn: undefined,
     _lastActiveSortFn: null,
     _cache: undefined,
     _cacheOrderIndependent: undefined },
  missingDependencies:
   SortableSet [Set] {
     _sortFn: undefined,
     _lastActiveSortFn: null,
     _cache: undefined,
     _cacheOrderIndependent: undefined } }
/var/www/html/mern-ts/backend/node_modules/nodemon-webpack-plugin/dist/webpack-utils.js:14
  var absoluteFileName = asset.existsAt;
                               ^

TypeError: Cannot read property 'existsAt' of undefined
    at getOutputFileMeta (/var/www/html/mern-ts/backend/node_modules/nodemon-webpack-plugin/dist/webpack-utils.js:14:32)
    at OnAfterEmit (/var/www/html/mern-ts/backend/node_modules/nodemon-webpack-plugin/dist/index.js:35:36)
    at AsyncSeriesHook.eval [as callAsync] (eval at create (/usr/lib/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:7:1)
    at AsyncSeriesHook.lazyCompileHook (/usr/lib/node_modules/webpack/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/usr/lib/node_modules/webpack/lib/Compiler.js:432:27)
    at Object.eachLimit (/usr/lib/node_modules/webpack/node_modules/neo-async/async.js:3461:14)
    at emitFiles (/usr/lib/node_modules/webpack/lib/Compiler.js:321:13)
    at /usr/lib/node_modules/webpack/node_modules/mkdirp/index.js:48:26
    at FSReqCallback.oncomplete (fs.js:159:5)
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
root@XE700:/var/www/html/mern-ts/backend#